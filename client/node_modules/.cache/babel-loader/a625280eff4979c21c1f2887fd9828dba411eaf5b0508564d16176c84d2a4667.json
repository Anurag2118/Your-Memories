{"ast":null,"code":"var _jsxFileName = \"D:\\\\Your Memories\\\\client\\\\src\\\\pages\\\\home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useGetUserID } from \"../hooks/useGetUserID\";\nimport { useCookies } from \"react-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const [memories, setMemories] = useState([]);\n  // Ensure savedMemories is initialized as an empty array\n  const [savedMemories, setSavedMemories] = useState([]);\n  const [cookies, _] = useCookies([\"access_token\"]);\n  const userID = useGetUserID();\n\n  // Effect to fetch initial memories and saved memories\n  useEffect(() => {\n    // Function to fetch all memories\n    const fetchMemories = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:3001/memories\");\n        setMemories(response.data);\n        console.log(\"Memories fetched successfully.\");\n      } catch (err) {\n        console.error(\"Error fetching memories:\", err);\n      }\n    };\n\n    // Function to fetch the IDs of memories saved by the current user\n    const fetchSavedMemories = async () => {\n      // Ensure we have a userID before trying to fetch saved memories\n      if (!userID) {\n        console.log(\"userID not available yet, skipping fetchSavedMemories\");\n        // Ensure savedMemories is empty if no user is logged in\n        setSavedMemories([]);\n        return;\n      }\n      // Only attempt to fetch if the user is logged in\n      if (!cookies.access_token) {\n        console.log(\"Access token missing, skipping fetchSavedMemories\");\n        setSavedMemories([]); // Ensure state is empty if not logged in\n        return;\n      }\n      try {\n        var _response$data;\n        console.log(\"Attempting to fetch saved memories for userID:\", userID);\n        // This GET endpoint should return an object like { savedMemories: [\"id1\", \"id2\"] }\n        const response = await axios.get(`http://localhost:3001/memories/savedMemories/ids/${userID}`);\n        console.log(\"Fetched saved memories response:\", response.data);\n        // **CRITICAL FIX:** Ensure response.data.savedMemories is an array before setting state.\n        // Use the received array or default to an empty array if response.data or savedMemories is null/undefined.\n        setSavedMemories(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.savedMemories) || []);\n        console.log(\"Saved memories state initialized from fetch.\");\n      } catch (err) {\n        console.error(\"Error fetching saved memories:\", err);\n        // In case of error, ensure savedMemories is at least an empty array\n        setSavedMemories([]);\n      }\n    };\n\n    // Fetch all memories on component mount\n    fetchMemories();\n\n    // Fetch saved memories only if the user is logged in (token and userID available)\n    // This useEffect should re-run if access_token or userID changes.\n    if (cookies.access_token && userID) {\n      fetchSavedMemories();\n    } else {\n      // If not logged in initially, clear saved memories state\n      setSavedMemories([]);\n    }\n  }, [cookies.access_token, userID]); // **CRITICAL FIX:** Added dependencies\n\n  // Function to handle saving a memory\n  const saveMemory = async memoryID => {\n    console.log(\"Save button clicked for memoryID:\", memoryID);\n    console.log(\"Current userID:\", userID);\n    console.log(\"Current access_token:\", cookies.access_token);\n\n    // Prevent saving if user is not logged in or token is missing\n    if (!userID || !cookies.access_token) {\n      console.log(\"Cannot save: User not logged in or token missing.\");\n      // You might want to show a UI message to the user here, e.g., \"Please log in to save memories.\"\n      return;\n    }\n    try {\n      var _response$data2;\n      console.log(\"Attempting to send PUT request to save memory...\");\n      // This PUT endpoint should expect { memoryID: \"...\", userID: \"...\" }\n      // and should *return* the *updated* list of saved memory IDs for the user.\n      const response = await axios.put(\"http://localhost:3001/memories\",\n      // Make sure this is the correct endpoint for saving\n      {\n        memoryID,\n        userID\n      }, {\n        headers: {\n          authorization: cookies.access_token\n        } // Sending the auth token\n      });\n      console.log(\"Response from PUT /memories:\", response.data);\n\n      // **CRITICAL FIX:** We expect response.data to contain the *updated* list of saved memory IDs\n      // e.g., { message: \"Saved!\", savedMemories: [\"id1\", \"id2\", \"newlySavedId\"] }\n      // Update the savedMemories state with the latest list from the backend, or default to empty array\n      setSavedMemories(((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.savedMemories) || []);\n      console.log(\"Saved memories state updated successfully from API response.\");\n    } catch (err) {\n      console.error(\"Error saving memory:\", err);\n      // Log detailed error info if available\n      if (err.response) {\n        console.error(\"Server responded with error status:\", err.response.status);\n        console.error(\"Server error data:\", err.response.data);\n      } else if (err.request) {\n        console.error(\"No response received from server.\");\n      } else {\n        console.error(\"Error setting up request:\", err.message);\n      }\n      // You might want to show an error message to the user on the UI\n    }\n  };\n\n  // Helper function to check if a memory ID is in the savedMemories array\n  // **CRITICAL FIX:** Safely checks if savedMemories is an array before calling .includes()\n  const isMemorySaved = id => {\n    // This is the core fix for the \"undefined includes\" error\n    return Array.isArray(savedMemories) && savedMemories.includes(id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Array.isArray(memories) && memories.map(memory => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: memory.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), userID ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => saveMemory(memory._id)\n            // Button is disabled if the memory ID is found in the savedMemories state\n            ,\n            disabled: isMemorySaved(memory._id),\n            children: isMemorySaved(memory._id) ? \"Saved\" : \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 18\n          }, this) :\n          /*#__PURE__*/\n          // Optionally show a message or nothing if the user is not logged in\n          _jsxDEV(\"p\", {\n            children: \"Log in to save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"descriptions\",\n          children: memory.descriptions && Array.isArray(memory.descriptions) && memory.descriptions.map((desc, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: desc\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: memory.imageUrl,\n          alt: memory.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Spent: \", memory.timeSpent]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, memory._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"Ts1jE7RDCNnjnWDhfQ7k+moAglE=\", false, function () {\n  return [useCookies, useGetUserID];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","axios","useGetUserID","useCookies","jsxDEV","_jsxDEV","Home","_s","memories","setMemories","savedMemories","setSavedMemories","cookies","_","userID","fetchMemories","response","get","data","console","log","err","error","fetchSavedMemories","access_token","_response$data","saveMemory","memoryID","_response$data2","put","headers","authorization","status","request","message","isMemorySaved","id","Array","isArray","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","map","memory","name","onClick","_id","disabled","className","descriptions","desc","i","src","imageUrl","alt","timeSpent","_c","$RefreshReg$"],"sources":["D:/Your Memories/client/src/pages/home.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useGetUserID } from \"../hooks/useGetUserID\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nexport const Home = () => {\r\n  const [memories, setMemories] = useState([]);\r\n  // Ensure savedMemories is initialized as an empty array\r\n  const [savedMemories, setSavedMemories] = useState([]);\r\n  const [cookies, _] = useCookies([\"access_token\"]);\r\n  const userID = useGetUserID();\r\n\r\n  // Effect to fetch initial memories and saved memories\r\n  useEffect(() => {\r\n    // Function to fetch all memories\r\n    const fetchMemories = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:3001/memories\");\r\n        setMemories(response.data);\r\n        console.log(\"Memories fetched successfully.\");\r\n      } catch (err) {\r\n        console.error(\"Error fetching memories:\", err);\r\n      }\r\n    };\r\n\r\n    // Function to fetch the IDs of memories saved by the current user\r\n    const fetchSavedMemories = async () => {\r\n      // Ensure we have a userID before trying to fetch saved memories\r\n      if (!userID) {\r\n          console.log(\"userID not available yet, skipping fetchSavedMemories\");\r\n          // Ensure savedMemories is empty if no user is logged in\r\n          setSavedMemories([]);\r\n          return;\r\n      }\r\n      // Only attempt to fetch if the user is logged in\r\n      if (!cookies.access_token) {\r\n           console.log(\"Access token missing, skipping fetchSavedMemories\");\r\n           setSavedMemories([]); // Ensure state is empty if not logged in\r\n           return;\r\n      }\r\n\r\n      try {\r\n        console.log(\"Attempting to fetch saved memories for userID:\", userID);\r\n        // This GET endpoint should return an object like { savedMemories: [\"id1\", \"id2\"] }\r\n        const response = await axios.get(\r\n          `http://localhost:3001/memories/savedMemories/ids/${userID}`\r\n        );\r\n        console.log(\"Fetched saved memories response:\", response.data);\r\n        // **CRITICAL FIX:** Ensure response.data.savedMemories is an array before setting state.\r\n        // Use the received array or default to an empty array if response.data or savedMemories is null/undefined.\r\n        setSavedMemories(response.data?.savedMemories || []);\r\n        console.log(\"Saved memories state initialized from fetch.\");\r\n      } catch (err) {\r\n        console.error(\"Error fetching saved memories:\", err);\r\n        // In case of error, ensure savedMemories is at least an empty array\r\n        setSavedMemories([]);\r\n      }\r\n    };\r\n\r\n    // Fetch all memories on component mount\r\n    fetchMemories();\r\n\r\n    // Fetch saved memories only if the user is logged in (token and userID available)\r\n    // This useEffect should re-run if access_token or userID changes.\r\n    if (cookies.access_token && userID) {\r\n        fetchSavedMemories();\r\n    } else {\r\n        // If not logged in initially, clear saved memories state\r\n        setSavedMemories([]);\r\n    }\r\n  }, [cookies.access_token, userID]); // **CRITICAL FIX:** Added dependencies\r\n\r\n  // Function to handle saving a memory\r\n  const saveMemory = async (memoryID) => {\r\n    console.log(\"Save button clicked for memoryID:\", memoryID);\r\n    console.log(\"Current userID:\", userID);\r\n    console.log(\"Current access_token:\", cookies.access_token);\r\n\r\n    // Prevent saving if user is not logged in or token is missing\r\n    if (!userID || !cookies.access_token) {\r\n        console.log(\"Cannot save: User not logged in or token missing.\");\r\n        // You might want to show a UI message to the user here, e.g., \"Please log in to save memories.\"\r\n        return;\r\n    }\r\n\r\n    try {\r\n      console.log(\"Attempting to send PUT request to save memory...\");\r\n      // This PUT endpoint should expect { memoryID: \"...\", userID: \"...\" }\r\n      // and should *return* the *updated* list of saved memory IDs for the user.\r\n      const response = await axios.put(\r\n        \"http://localhost:3001/memories\", // Make sure this is the correct endpoint for saving\r\n        {\r\n          memoryID,\r\n          userID,\r\n        },\r\n        {\r\n          headers: { authorization: cookies.access_token }, // Sending the auth token\r\n        }\r\n      );\r\n\r\n      console.log(\"Response from PUT /memories:\", response.data);\r\n\r\n      // **CRITICAL FIX:** We expect response.data to contain the *updated* list of saved memory IDs\r\n      // e.g., { message: \"Saved!\", savedMemories: [\"id1\", \"id2\", \"newlySavedId\"] }\r\n      // Update the savedMemories state with the latest list from the backend, or default to empty array\r\n      setSavedMemories(response.data?.savedMemories || []);\r\n      console.log(\"Saved memories state updated successfully from API response.\");\r\n\r\n\r\n    } catch (err) {\r\n      console.error(\"Error saving memory:\", err);\r\n      // Log detailed error info if available\r\n      if (err.response) {\r\n          console.error(\"Server responded with error status:\", err.response.status);\r\n          console.error(\"Server error data:\", err.response.data);\r\n      } else if (err.request) {\r\n          console.error(\"No response received from server.\");\r\n      } else {\r\n          console.error(\"Error setting up request:\", err.message);\r\n      }\r\n      // You might want to show an error message to the user on the UI\r\n    }\r\n  };\r\n\r\n  // Helper function to check if a memory ID is in the savedMemories array\r\n  // **CRITICAL FIX:** Safely checks if savedMemories is an array before calling .includes()\r\n  const isMemorySaved = (id) => {\r\n       // This is the core fix for the \"undefined includes\" error\r\n       return Array.isArray(savedMemories) && savedMemories.includes(id);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Memories</h1>\r\n      <ul>\r\n        {/* Map through the list of all memories */}\r\n        {/* Add a check for memories being an array just in case */}\r\n        {Array.isArray(memories) && memories.map((memory) => (\r\n          <li key={memory._id}>\r\n            <div>\r\n              <h2>{memory.name}</h2>\r\n              {/* Conditionally render the Save button only if the user is logged in (userID exists) */}\r\n              {userID ? (\r\n                 <button\r\n                   onClick={() => saveMemory(memory._id)}\r\n                   // Button is disabled if the memory ID is found in the savedMemories state\r\n                   disabled={isMemorySaved(memory._id)}\r\n                 >\r\n                   {/* Button text changes based on whether the memory is saved */}\r\n                   {isMemorySaved(memory._id) ? \"Saved\" : \"Save\"}\r\n                 </button>\r\n              ) : (\r\n                  // Optionally show a message or nothing if the user is not logged in\r\n                  <p>Log in to save</p>\r\n              )}\r\n            </div>\r\n            <div className=\"descriptions\">\r\n              {/* Map through descriptions if they exist and are an array */}\r\n              {memory.descriptions && Array.isArray(memory.descriptions) && memory.descriptions.map((desc, i) => (\r\n                <p key={i}>{desc}</p>\r\n              ))}\r\n            </div>\r\n            <img src={memory.imageUrl} alt={memory.name} />\r\n            <p>Time Spent: {memory.timeSpent}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}