{"ast":null,"code":"var _jsxFileName = \"D:\\\\Your Memories\\\\client\\\\src\\\\pages\\\\home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useGetUserID } from \"../hooks/useGetUserID\";\nimport { useCookies } from \"react-cookie\";\n// Material-UI Components\nimport { Box, Grid, Card, CardMedia, CardContent, CardActions, Button, Typography, CircularProgress } from \"@mui/material\";\n// Material-UI Icons\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BACKEND_URL = \"https://your-memories-backend.onrender.com\";\nexport const Home = () => {\n  _s();\n  const [memories, setMemories] = useState([]);\n  const [savedMemories, setSavedMemories] = useState([]);\n  const [loading, setLoading] = useState(true); // Loading state for initial fetch\n\n  const [cookies, _] = useCookies([\"access_token\"]);\n  const userID = useGetUserID();\n  useEffect(() => {\n    const fetchMemories = async () => {\n      try {\n        const response = await axios.get(`${BACKEND_URL}/memories`);\n        setMemories(response.data);\n      } catch (err) {\n        console.error(\"Error fetching memories:\", err);\n      } finally {\n        setLoading(false); // Stop loading once fetch is complete\n      }\n    };\n    const fetchSavedMemories = async () => {\n      if (!userID) return;\n      try {\n        const response = await axios.get(`${BACKEND_URL}/memories/savedMemories/ids/${userID}`);\n        setSavedMemories(response.data.savedMemories || []);\n      } catch (err) {\n        console.error(\"Error fetching saved memories:\", err);\n      }\n    };\n    fetchMemories();\n    if (cookies.access_token) {\n      fetchSavedMemories();\n    }\n  }, [userID, cookies.access_token]);\n  const saveMemory = async memoryID => {\n    // --- START DEBUGGING ---\n    console.log(\"--- Toggling Save State ---\");\n    console.log(\"Backend URL:\", BACKEND_URL);\n    console.log(\"Memory ID:\", memoryID);\n    console.log(\"User ID:\", userID);\n    console.log(\"Access Token:\", cookies.access_token);\n    // --- END DEBUGGING ---\n\n    try {\n      const fullURL = `${BACKEND_URL}/memories`;\n      console.log(\"Attempting to send PUT request to:\", fullURL);\n      const response = await axios.put(fullURL, {\n        memoryID,\n        userID\n      }, {\n        headers: {\n          authorization: `Bearer ${cookies.access_token}`\n        }\n      });\n      setSavedMemories(response.data.savedMemories);\n    } catch (err) {\n      console.error(\"Error toggling save state:\", err);\n    }\n  };\n  const isMemorySaved = id => savedMemories.includes(id);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '80vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      padding: 3,\n      backgroundColor: '#f4f6f8'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      component: \"h1\",\n      gutterBottom: true,\n      align: \"center\",\n      sx: {\n        fontWeight: 'bold',\n        marginBottom: 4\n      },\n      children: \"Discover Memories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: memories.map(memory =>\n      /*#__PURE__*/\n      // Each memory is a responsive grid item\n      _jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 3,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            borderRadius: 2,\n            boxShadow: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            height: \"200\",\n            image: memory.imageURL,\n            alt: memory.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n            sx: {\n              flexGrow: 1\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              gutterBottom: true,\n              variant: \"h5\",\n              component: \"h2\",\n              sx: {\n                fontWeight: 'bold'\n              },\n              children: memory.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [memory.descriptions[0], \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n            sx: {\n              paddingX: 2,\n              paddingBottom: 2\n            },\n            children: userID ? /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              size: \"small\",\n              onClick: () => saveMemory(memory._id),\n              startIcon: isMemorySaved(memory._id) ? /*#__PURE__*/_jsxDEV(BookmarkIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 60\n              }, this) : /*#__PURE__*/_jsxDEV(BookmarkBorderIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 79\n              }, this),\n              children: isMemorySaved(memory._id) ? \"Saved\" : \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              children: \"Login to save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)\n      }, memory._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"jHnn6VxvxphSJT1Se1nWa0OHzyI=\", false, function () {\n  return [useCookies, useGetUserID];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","axios","useGetUserID","useCookies","Box","Grid","Card","CardMedia","CardContent","CardActions","Button","Typography","CircularProgress","BookmarkBorderIcon","BookmarkIcon","jsxDEV","_jsxDEV","BACKEND_URL","Home","_s","memories","setMemories","savedMemories","setSavedMemories","loading","setLoading","cookies","_","userID","fetchMemories","response","get","data","err","console","error","fetchSavedMemories","access_token","saveMemory","memoryID","log","fullURL","put","headers","authorization","isMemorySaved","id","includes","sx","display","justifyContent","alignItems","height","children","fileName","_jsxFileName","lineNumber","columnNumber","padding","backgroundColor","variant","component","gutterBottom","align","fontWeight","marginBottom","container","spacing","map","memory","item","xs","sm","md","lg","flexDirection","borderRadius","boxShadow","image","imageURL","alt","name","flexGrow","color","descriptions","paddingX","paddingBottom","size","onClick","_id","startIcon","_c","$RefreshReg$"],"sources":["D:/Your Memories/client/src/pages/home.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useGetUserID } from \"../hooks/useGetUserID\";\r\nimport { useCookies } from \"react-cookie\";\r\n// Material-UI Components\r\nimport { Box, Grid, Card, CardMedia, CardContent, CardActions, Button, Typography, CircularProgress } from \"@mui/material\";\r\n// Material-UI Icons\r\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\r\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\r\n\r\nconst BACKEND_URL = \"https://your-memories-backend.onrender.com\";\r\n\r\nexport const Home = () => {\r\n  const [memories, setMemories] = useState([]);\r\n  const [savedMemories, setSavedMemories] = useState([]);\r\n  const [loading, setLoading] = useState(true); // Loading state for initial fetch\r\n\r\n  const [cookies, _] = useCookies([\"access_token\"]);\r\n  const userID = useGetUserID();\r\n\r\n  useEffect(() => {\r\n    const fetchMemories = async () => {\r\n      try {\r\n        const response = await axios.get(`${BACKEND_URL}/memories`);\r\n        setMemories(response.data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching memories:\", err);\r\n      } finally {\r\n        setLoading(false); // Stop loading once fetch is complete\r\n      }\r\n    };\r\n\r\n    const fetchSavedMemories = async () => {\r\n      if (!userID) return;\r\n      try {\r\n        const response = await axios.get(\r\n          `${BACKEND_URL}/memories/savedMemories/ids/${userID}`\r\n        );\r\n        setSavedMemories(response.data.savedMemories || []);\r\n      } catch (err) {\r\n        console.error(\"Error fetching saved memories:\", err);\r\n      }\r\n    };\r\n\r\n    fetchMemories();\r\n    if (cookies.access_token) {\r\n      fetchSavedMemories();\r\n    }\r\n  }, [userID, cookies.access_token]);\r\n\r\n  const saveMemory = async (memoryID) => {\r\n    // --- START DEBUGGING ---\r\n    console.log(\"--- Toggling Save State ---\");\r\n    console.log(\"Backend URL:\", BACKEND_URL);\r\n    console.log(\"Memory ID:\", memoryID);\r\n    console.log(\"User ID:\", userID);\r\n    console.log(\"Access Token:\", cookies.access_token);\r\n    // --- END DEBUGGING ---\r\n\r\n    try {\r\n      const fullURL = `${BACKEND_URL}/memories`;\r\n      console.log(\"Attempting to send PUT request to:\", fullURL);\r\n\r\n      const response = await axios.put(\r\n        fullURL,\r\n        { memoryID, userID },\r\n        { \r\n          headers: { authorization: `Bearer ${cookies.access_token}` } \r\n        }\r\n      );\r\n      setSavedMemories(response.data.savedMemories);\r\n    } catch (err) {\r\n      console.error(\"Error toggling save state:\", err);\r\n    }\r\n  };\r\n\r\n  const isMemorySaved = (id) => savedMemories.includes(id);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '80vh' }}>\r\n        <CircularProgress />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ padding: 3, backgroundColor: '#f4f6f8' }}>\r\n      <Typography variant=\"h3\" component=\"h1\" gutterBottom align=\"center\" sx={{ fontWeight: 'bold', marginBottom: 4 }}>\r\n        Discover Memories\r\n      </Typography>\r\n      \r\n      {/* Grid container to hold all memory cards */}\r\n      <Grid container spacing={4}>\r\n        {memories.map((memory) => (\r\n          // Each memory is a responsive grid item\r\n          <Grid item key={memory._id} xs={12} sm={6} md={4} lg={3}>\r\n            \r\n            {/* The Card component that displays a single memory */}\r\n            <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column', borderRadius: 2, boxShadow: 3 }}>\r\n              <CardMedia\r\n                component=\"img\"\r\n                height=\"200\"\r\n                image={memory.imageURL}\r\n                alt={memory.name}\r\n              />\r\n              <CardContent sx={{ flexGrow: 1 }}>\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\" sx={{ fontWeight: 'bold' }}>\r\n                  {memory.name}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {memory.descriptions[0]} {/* Displaying only the first description for brevity */}\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions sx={{ paddingX: 2, paddingBottom: 2 }}>\r\n                {userID ? (\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    onClick={() => saveMemory(memory._id)}\r\n                    startIcon={isMemorySaved(memory._id) ? <BookmarkIcon /> : <BookmarkBorderIcon />}\r\n                  >\r\n                    {isMemorySaved(memory._id) ? \"Saved\" : \"Save\"}\r\n                  </Button>\r\n                ) : (\r\n                  <Typography variant=\"caption\" color=\"text.secondary\">\r\n                    Login to save\r\n                  </Typography>\r\n                )}\r\n              </CardActions>\r\n            </Card>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}