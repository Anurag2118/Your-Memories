{"ast":null,"code":"var _jsxFileName = \"D:\\\\Your Memories\\\\client\\\\src\\\\pages\\\\home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useGetUserID } from \"../hooks/useGetUserID\";\nimport { useCookies } from \"react-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const [memories, setMemories] = useState([]);\n  const [savedMemories, setSavedMemories] = useState([]);\n  const [cookies, _] = useCookies([\"access_token\"]);\n  const userID = useGetUserID();\n  useEffect(() => {\n    const fetchMemories = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:3001/memories\");\n        setMemories(response.data);\n      } catch (err) {\n        console.error(\"Error fetching memories:\", err);\n      }\n    };\n    const fetchSavedMemories = async () => {\n      // Added check for userID before fetching\n      if (!userID) {\n        console.log(\"userID not available yet, skipping fetchSavedMemories\");\n        return;\n      }\n      try {\n        console.log(\"Attempting to fetch saved memories for userID:\", userID);\n        const response = await axios.get(`http://localhost:3001/memories/savedMemories/ids/${userID}`);\n        console.log(\"Fetched saved memories response:\", response.data);\n        // Ensure response.data.savedMemories is an array before setting state\n        setSavedMemories(response.data.savedMemories || []);\n      } catch (err) {\n        console.error(\"Error fetching saved memories:\", err);\n        // Set to empty array in case of an error fetching saved memories\n        setSavedMemories([]);\n      }\n    };\n    fetchMemories();\n    // Fetch saved memories only if token and userID are present\n    if (cookies.access_token && userID) {\n      fetchSavedMemories();\n    }\n  }, [cookies.access_token, userID]); // Dependencies added\n\n  const saveMemory = async memoryID => {\n    console.log(\"Save button clicked for memoryID:\", memoryID);\n    console.log(\"Current userID:\", userID);\n    console.log(\"Current access_token:\", cookies.access_token);\n\n    // Check if userID and access_token are available before attempting to save\n    if (!userID || !cookies.access_token) {\n      console.log(\"Cannot save: User not logged in or token missing.\");\n      // Optionally, show a message to the user that they need to log in\n      return;\n    }\n    try {\n      console.log(\"Attempting to save memory via API...\");\n      const response = await axios.put(\"http://localhost:3001/memories\", {\n        memoryID,\n        userID\n      }, {\n        headers: {\n          authorization: cookies.access_token\n        }\n      });\n      console.log(\"Save memory API response:\", response.data);\n      // Ensure response.data.savedMemories is an array before setting state\n      setSavedMemories(response.data.savedMemories || []);\n      console.log(\"Saved memories state updated.\");\n    } catch (err) {\n      console.error(\"Error saving memory:\", err);\n      // Check if the error has a response from the server\n      if (err.response) {\n        console.error(\"Server response data:\", err.response.data);\n        console.error(\"Server response status:\", err.response.status);\n        console.error(\"Server response headers:\", err.response.headers);\n      } else if (err.request) {\n        // The request was made but no response was received\n        console.error(\"No response received from server:\", err.request);\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        console.error(\"Error setting up request:\", err.message);\n      }\n    }\n  };\n\n  // Safely check if savedMemories is an array before calling includes\n  const isMemorySaved = id => {\n    const result = Array.isArray(savedMemories) && savedMemories.includes(id);\n    // console.log(`Checking if memory ${id} is saved. Saved memories:`, savedMemories, `Result: ${result}`); // Too verbose, uncomment if needed\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: memories.map(memory => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: memory.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), userID ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => saveMemory(memory._id),\n            disabled: isMemorySaved(memory._id),\n            children: isMemorySaved(memory._id) ? \"Saved\" : \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 18\n          }, this) :\n          /*#__PURE__*/\n          // Optionally render something else or nothing if not logged in\n          _jsxDEV(\"p\", {\n            children: \"Log in to save memories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"descriptions\",\n          children: memory.descriptions && memory.descriptions.map((desc, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: desc\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: memory.imageUrl,\n          alt: memory.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Spent: \", memory.timeSpent]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, memory._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"Ts1jE7RDCNnjnWDhfQ7k+moAglE=\", false, function () {\n  return [useCookies, useGetUserID];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","axios","useGetUserID","useCookies","jsxDEV","_jsxDEV","Home","_s","memories","setMemories","savedMemories","setSavedMemories","cookies","_","userID","fetchMemories","response","get","data","err","console","error","fetchSavedMemories","log","access_token","saveMemory","memoryID","put","headers","authorization","status","request","message","isMemorySaved","id","result","Array","isArray","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","map","memory","name","onClick","_id","disabled","className","descriptions","desc","i","src","imageUrl","alt","timeSpent","_c","$RefreshReg$"],"sources":["D:/Your Memories/client/src/pages/home.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useGetUserID } from \"../hooks/useGetUserID\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nexport const Home = () => {\r\n  const [memories, setMemories] = useState([]);\r\n  const [savedMemories, setSavedMemories] = useState([]);\r\n  const [cookies, _] = useCookies([\"access_token\"]);\r\n  const userID = useGetUserID();\r\n\r\n  useEffect(() => {\r\n    const fetchMemories = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:3001/memories\");\r\n        setMemories(response.data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching memories:\", err);\r\n      }\r\n    };\r\n\r\n    const fetchSavedMemories = async () => {\r\n      // Added check for userID before fetching\r\n      if (!userID) {\r\n          console.log(\"userID not available yet, skipping fetchSavedMemories\");\r\n          return;\r\n      }\r\n      try {\r\n        console.log(\"Attempting to fetch saved memories for userID:\", userID);\r\n        const response = await axios.get(\r\n          `http://localhost:3001/memories/savedMemories/ids/${userID}`\r\n        );\r\n        console.log(\"Fetched saved memories response:\", response.data);\r\n        // Ensure response.data.savedMemories is an array before setting state\r\n        setSavedMemories(response.data.savedMemories || []);\r\n      } catch (err) {\r\n        console.error(\"Error fetching saved memories:\", err);\r\n        // Set to empty array in case of an error fetching saved memories\r\n        setSavedMemories([]);\r\n      }\r\n    };\r\n\r\n    fetchMemories();\r\n    // Fetch saved memories only if token and userID are present\r\n    if (cookies.access_token && userID) {\r\n        fetchSavedMemories();\r\n    }\r\n  }, [cookies.access_token, userID]); // Dependencies added\r\n\r\n  const saveMemory = async (memoryID) => {\r\n    console.log(\"Save button clicked for memoryID:\", memoryID);\r\n    console.log(\"Current userID:\", userID);\r\n    console.log(\"Current access_token:\", cookies.access_token);\r\n\r\n    // Check if userID and access_token are available before attempting to save\r\n    if (!userID || !cookies.access_token) {\r\n        console.log(\"Cannot save: User not logged in or token missing.\");\r\n        // Optionally, show a message to the user that they need to log in\r\n        return;\r\n    }\r\n\r\n    try {\r\n      console.log(\"Attempting to save memory via API...\");\r\n      const response = await axios.put(\r\n        \"http://localhost:3001/memories\",\r\n        {\r\n          memoryID,\r\n          userID,\r\n        },\r\n        {\r\n          headers: { authorization: cookies.access_token },\r\n        }\r\n      );\r\n      console.log(\"Save memory API response:\", response.data);\r\n      // Ensure response.data.savedMemories is an array before setting state\r\n      setSavedMemories(response.data.savedMemories || []);\r\n      console.log(\"Saved memories state updated.\");\r\n    } catch (err) {\r\n      console.error(\"Error saving memory:\", err);\r\n      // Check if the error has a response from the server\r\n      if (err.response) {\r\n          console.error(\"Server response data:\", err.response.data);\r\n          console.error(\"Server response status:\", err.response.status);\r\n          console.error(\"Server response headers:\", err.response.headers);\r\n      } else if (err.request) {\r\n          // The request was made but no response was received\r\n          console.error(\"No response received from server:\", err.request);\r\n      } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.error(\"Error setting up request:\", err.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Safely check if savedMemories is an array before calling includes\r\n  const isMemorySaved = (id) => {\r\n      const result = Array.isArray(savedMemories) && savedMemories.includes(id);\r\n      // console.log(`Checking if memory ${id} is saved. Saved memories:`, savedMemories, `Result: ${result}`); // Too verbose, uncomment if needed\r\n      return result;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Memories</h1>\r\n      <ul>\r\n        {memories.map((memory) => (\r\n          <li key={memory._id}>\r\n            <div>\r\n              <h2>{memory.name}</h2>\r\n              {/* Only render the button if userID is available, preventing clicks when not logged in */}\r\n              {userID ? (\r\n                 <button\r\n                   onClick={() => saveMemory(memory._id)}\r\n                   disabled={isMemorySaved(memory._id)}\r\n                 >\r\n                   {isMemorySaved(memory._id) ? \"Saved\" : \"Save\"}\r\n                 </button>\r\n              ) : (\r\n                  // Optionally render something else or nothing if not logged in\r\n                  <p>Log in to save memories</p>\r\n              )}\r\n            </div>\r\n            <div className=\"descriptions\">\r\n              {/* Add a check before mapping over descriptions */}\r\n              {memory.descriptions && memory.descriptions.map((desc, i) => (\r\n                <p key={i}>{desc}</p>\r\n              ))}\r\n            </div>\r\n            <img src={memory.imageUrl} alt={memory.name} />\r\n            <p>Time Spent: {memory.timeSpent}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,OAAO,EAAEC,CAAC,CAAC,GAAGV,UAAU,CAAC,CAAC,cAAc,CAAC,CAAC;EACjD,MAAMW,MAAM,GAAGZ,YAAY,CAAC,CAAC;EAE7BH,SAAS,CAAC,MAAM;IACd,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,gCAAgC,CAAC;QAClER,WAAW,CAACO,QAAQ,CAACE,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;MAChD;IACF,CAAC;IAED,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC;MACA,IAAI,CAACR,MAAM,EAAE;QACTM,OAAO,CAACG,GAAG,CAAC,uDAAuD,CAAC;QACpE;MACJ;MACA,IAAI;QACFH,OAAO,CAACG,GAAG,CAAC,gDAAgD,EAAET,MAAM,CAAC;QACrE,MAAME,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAC9B,oDAAoDH,MAAM,EAC5D,CAAC;QACDM,OAAO,CAACG,GAAG,CAAC,kCAAkC,EAAEP,QAAQ,CAACE,IAAI,CAAC;QAC9D;QACAP,gBAAgB,CAACK,QAAQ,CAACE,IAAI,CAACR,aAAa,IAAI,EAAE,CAAC;MACrD,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;QACpD;QACAR,gBAAgB,CAAC,EAAE,CAAC;MACtB;IACF,CAAC;IAEDI,aAAa,CAAC,CAAC;IACf;IACA,IAAIH,OAAO,CAACY,YAAY,IAAIV,MAAM,EAAE;MAChCQ,kBAAkB,CAAC,CAAC;IACxB;EACF,CAAC,EAAE,CAACV,OAAO,CAACY,YAAY,EAAEV,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEpC,MAAMW,UAAU,GAAG,MAAOC,QAAQ,IAAK;IACrCN,OAAO,CAACG,GAAG,CAAC,mCAAmC,EAAEG,QAAQ,CAAC;IAC1DN,OAAO,CAACG,GAAG,CAAC,iBAAiB,EAAET,MAAM,CAAC;IACtCM,OAAO,CAACG,GAAG,CAAC,uBAAuB,EAAEX,OAAO,CAACY,YAAY,CAAC;;IAE1D;IACA,IAAI,CAACV,MAAM,IAAI,CAACF,OAAO,CAACY,YAAY,EAAE;MAClCJ,OAAO,CAACG,GAAG,CAAC,mDAAmD,CAAC;MAChE;MACA;IACJ;IAEA,IAAI;MACFH,OAAO,CAACG,GAAG,CAAC,sCAAsC,CAAC;MACnD,MAAMP,QAAQ,GAAG,MAAMf,KAAK,CAAC0B,GAAG,CAC9B,gCAAgC,EAChC;QACED,QAAQ;QACRZ;MACF,CAAC,EACD;QACEc,OAAO,EAAE;UAAEC,aAAa,EAAEjB,OAAO,CAACY;QAAa;MACjD,CACF,CAAC;MACDJ,OAAO,CAACG,GAAG,CAAC,2BAA2B,EAAEP,QAAQ,CAACE,IAAI,CAAC;MACvD;MACAP,gBAAgB,CAACK,QAAQ,CAACE,IAAI,CAACR,aAAa,IAAI,EAAE,CAAC;MACnDU,OAAO,CAACG,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC,CAAC,OAAOJ,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;MAC1C;MACA,IAAIA,GAAG,CAACH,QAAQ,EAAE;QACdI,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,GAAG,CAACH,QAAQ,CAACE,IAAI,CAAC;QACzDE,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAACH,QAAQ,CAACc,MAAM,CAAC;QAC7DV,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAACH,QAAQ,CAACY,OAAO,CAAC;MACnE,CAAC,MAAM,IAAIT,GAAG,CAACY,OAAO,EAAE;QACpB;QACAX,OAAO,CAACC,KAAK,CAAC,mCAAmC,EAAEF,GAAG,CAACY,OAAO,CAAC;MACnE,CAAC,MAAM;QACH;QACAX,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEF,GAAG,CAACa,OAAO,CAAC;MAC3D;IACF;EACF,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIC,EAAE,IAAK;IAC1B,MAAMC,MAAM,GAAGC,KAAK,CAACC,OAAO,CAAC3B,aAAa,CAAC,IAAIA,aAAa,CAAC4B,QAAQ,CAACJ,EAAE,CAAC;IACzE;IACA,OAAOC,MAAM;EACjB,CAAC;EAED,oBACE9B,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBtC,OAAA;MAAAkC,QAAA,EACG/B,QAAQ,CAACoC,GAAG,CAAEC,MAAM,iBACnBxC,OAAA;QAAAkC,QAAA,gBACElC,OAAA;UAAAkC,QAAA,gBACElC,OAAA;YAAAkC,QAAA,EAAKM,MAAM,CAACC;UAAI;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,EAErB7B,MAAM,gBACJT,OAAA;YACE0C,OAAO,EAAEA,CAAA,KAAMtB,UAAU,CAACoB,MAAM,CAACG,GAAG,CAAE;YACtCC,QAAQ,EAAEhB,aAAa,CAACY,MAAM,CAACG,GAAG,CAAE;YAAAT,QAAA,EAEnCN,aAAa,CAACY,MAAM,CAACG,GAAG,CAAC,GAAG,OAAO,GAAG;UAAM;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvC,CAAC;UAAA;UAER;UACAtC,OAAA;YAAAkC,QAAA,EAAG;UAAuB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAChC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,eACNtC,OAAA;UAAK6C,SAAS,EAAC,cAAc;UAAAX,QAAA,EAE1BM,MAAM,CAACM,YAAY,IAAIN,MAAM,CAACM,YAAY,CAACP,GAAG,CAAC,CAACQ,IAAI,EAAEC,CAAC,kBACtDhD,OAAA;YAAAkC,QAAA,EAAYa;UAAI,GAARC,CAAC;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CACrB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNtC,OAAA;UAAKiD,GAAG,EAAET,MAAM,CAACU,QAAS;UAACC,GAAG,EAAEX,MAAM,CAACC;QAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC/CtC,OAAA;UAAAkC,QAAA,GAAG,cAAY,EAACM,MAAM,CAACY,SAAS;QAAA;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAvB9BE,MAAM,CAACG,GAAG;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAwBf,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACpC,EAAA,CAlIWD,IAAI;EAAA,QAGMH,UAAU,EAChBD,YAAY;AAAA;AAAAwD,EAAA,GAJhBpD,IAAI;AAAA,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}