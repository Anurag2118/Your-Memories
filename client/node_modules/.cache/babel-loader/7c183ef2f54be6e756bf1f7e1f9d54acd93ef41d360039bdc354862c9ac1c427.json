{"ast":null,"code":"var _jsxFileName = \"D:\\\\Your Memories\\\\client\\\\src\\\\pages\\\\home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useGetUserID } from \"../hooks/useGetUserID\";\nimport { useCookies } from \"react-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const [memories, setMemories] = useState([]);\n  const [savedMemories, setSavedMemories] = useState([]); // State to hold IDs of saved memories\n  const [cookies, _] = useCookies([\"access_token\"]);\n  const userID = useGetUserID(); // Custom hook to get the logged-in user's ID\n\n  // Effect to fetch memories and the current user's saved memories on component mount or when user/token changes\n  useEffect(() => {\n    // Function to fetch all available memories\n    const fetchMemories = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:3001/memories\");\n        setMemories(response.data);\n      } catch (err) {\n        console.error(\"Error fetching memories:\", err);\n      }\n    };\n\n    // Function to fetch the IDs of memories saved by the current user\n    const fetchSavedMemories = async () => {\n      // Only attempt to fetch if the user is logged in (userID and token are available)\n      if (!userID || !cookies.access_token) {\n        setSavedMemories([]); // Clear saved memories state if not logged in\n        return;\n      }\n      try {\n        var _response$data;\n        // This GET endpoint should return an object like { savedMemories: [\"id1\", \"id2\", ...] }\n        const response = await axios.get(`http://localhost:3001/memories/savedMemories/ids/${userID}`);\n        // Update the savedMemories state with the array received from the backend.\n        // Use optional chaining and nullish coalescing to handle potential missing data safely.\n        setSavedMemories(((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.savedMemories) || []);\n      } catch (err) {\n        console.error(\"Error fetching saved memories:\", err);\n        // In case of error, ensure the state is an empty array\n        setSavedMemories([]);\n      }\n    };\n\n    // Fetch all memories when the component mounts\n    fetchMemories();\n\n    // Fetch saved memories when the component mounts OR when the user logs in/out (userID/token change)\n    if (cookies.access_token && userID) {\n      fetchSavedMemories();\n    } else {\n      // Ensure saved memories are cleared if the user logs out or isn't logged in initially\n      setSavedMemories([]);\n    }\n  }, [cookies.access_token, userID]); // Dependency array: re-run effect if these values change\n\n  // Function to handle saving a memory when the button is clicked\n  const saveMemory = async memoryID => {\n    // Prevent the action if user is not logged in\n    if (!userID || !cookies.access_token) {\n      console.log(\"Cannot save: User not logged in or token missing.\");\n      // You might add UI feedback here (e.g., a toast notification)\n      return;\n    }\n    try {\n      var _response$data2;\n      // Send a PUT request to the backend to save the memory\n      // The backend needs to process this and **return the updated list of saved memory IDs**\n      const response = await axios.put(\"http://localhost:3001/memories\",\n      // The backend endpoint to save memories\n      {\n        memoryID,\n        // Pass the memory ID to save\n        userID // Pass the user ID\n      }, {\n        headers: {\n          authorization: cookies.access_token\n        } // Include the auth token\n      });\n\n      // **THIS IS THE CRUCIAL PART:**\n      // Update the frontend state using the list of saved memories received from the backend response.\n      // The backend *must* send back a response like { savedMemories: [...] }.\n      setSavedMemories(((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.savedMemories) || []);\n    } catch (err) {\n      console.error(\"Error saving memory:\", err);\n      // Log more details about the error response if available\n      if (err.response) {\n        console.error(\"Server error data:\", err.response.data);\n        console.error(\"Server error status:\", err.response.status);\n      }\n      // You might add UI feedback here (e.g., an error message)\n    }\n  };\n\n  // Helper function to check if a memory ID is in the current savedMemories state array\n  // Safely checks if savedMemories is an array before attempting to use .includes()\n  const isMemorySaved = id => {\n    // Check if savedMemories is an array AND if it includes the given ID\n    return Array.isArray(savedMemories) && savedMemories.includes(id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Array.isArray(memories) && memories.map(memory => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: memory.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), userID ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => saveMemory(memory._id) // Call saveMemory on click\n            // Button is disabled if the memory's ID is in the savedMemories state\n            ,\n            disabled: isMemorySaved(memory._id),\n            children: isMemorySaved(memory._id) ? \"Saved\" : \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 18\n          }, this) :\n          /*#__PURE__*/\n          // Show a message if user is not logged in\n          _jsxDEV(\"p\", {\n            children: \"Log in to save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"descriptions\",\n          children: memory.descriptions && Array.isArray(memory.descriptions) && memory.descriptions.map((desc, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: desc\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: memory.imageUrl,\n          alt: memory.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Spent: \", memory.timeSpent]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, memory._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"Ts1jE7RDCNnjnWDhfQ7k+moAglE=\", false, function () {\n  return [useCookies, useGetUserID];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","axios","useGetUserID","useCookies","jsxDEV","_jsxDEV","Home","_s","memories","setMemories","savedMemories","setSavedMemories","cookies","_","userID","fetchMemories","response","get","data","err","console","error","fetchSavedMemories","access_token","_response$data","saveMemory","memoryID","log","_response$data2","put","headers","authorization","status","isMemorySaved","id","Array","isArray","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","map","memory","name","onClick","_id","disabled","className","descriptions","desc","i","src","imageUrl","alt","timeSpent","_c","$RefreshReg$"],"sources":["D:/Your Memories/client/src/pages/home.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useGetUserID } from \"../hooks/useGetUserID\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nexport const Home = () => {\r\n  const [memories, setMemories] = useState([]);\r\n  const [savedMemories, setSavedMemories] = useState([]); // State to hold IDs of saved memories\r\n  const [cookies, _] = useCookies([\"access_token\"]);\r\n  const userID = useGetUserID(); // Custom hook to get the logged-in user's ID\r\n\r\n  // Effect to fetch memories and the current user's saved memories on component mount or when user/token changes\r\n  useEffect(() => {\r\n    // Function to fetch all available memories\r\n    const fetchMemories = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:3001/memories\");\r\n        setMemories(response.data);\r\n      } catch (err) {\r\n        console.error(\"Error fetching memories:\", err);\r\n      }\r\n    };\r\n\r\n    // Function to fetch the IDs of memories saved by the current user\r\n    const fetchSavedMemories = async () => {\r\n      // Only attempt to fetch if the user is logged in (userID and token are available)\r\n      if (!userID || !cookies.access_token) {\r\n           setSavedMemories([]); // Clear saved memories state if not logged in\r\n           return;\r\n      }\r\n\r\n      try {\r\n        // This GET endpoint should return an object like { savedMemories: [\"id1\", \"id2\", ...] }\r\n        const response = await axios.get(\r\n          `http://localhost:3001/memories/savedMemories/ids/${userID}`\r\n        );\r\n        // Update the savedMemories state with the array received from the backend.\r\n        // Use optional chaining and nullish coalescing to handle potential missing data safely.\r\n        setSavedMemories(response.data?.savedMemories || []);\r\n      } catch (err) {\r\n        console.error(\"Error fetching saved memories:\", err);\r\n        // In case of error, ensure the state is an empty array\r\n        setSavedMemories([]);\r\n      }\r\n    };\r\n\r\n    // Fetch all memories when the component mounts\r\n    fetchMemories();\r\n\r\n    // Fetch saved memories when the component mounts OR when the user logs in/out (userID/token change)\r\n    if (cookies.access_token && userID) {\r\n        fetchSavedMemories();\r\n    } else {\r\n        // Ensure saved memories are cleared if the user logs out or isn't logged in initially\r\n        setSavedMemories([]);\r\n    }\r\n  }, [cookies.access_token, userID]); // Dependency array: re-run effect if these values change\r\n\r\n  // Function to handle saving a memory when the button is clicked\r\n  const saveMemory = async (memoryID) => {\r\n    // Prevent the action if user is not logged in\r\n    if (!userID || !cookies.access_token) {\r\n        console.log(\"Cannot save: User not logged in or token missing.\");\r\n        // You might add UI feedback here (e.g., a toast notification)\r\n        return;\r\n    }\r\n\r\n    try {\r\n      // Send a PUT request to the backend to save the memory\r\n      // The backend needs to process this and **return the updated list of saved memory IDs**\r\n      const response = await axios.put(\r\n        \"http://localhost:3001/memories\", // The backend endpoint to save memories\r\n        {\r\n          memoryID, // Pass the memory ID to save\r\n          userID,   // Pass the user ID\r\n        },\r\n        {\r\n          headers: { authorization: cookies.access_token }, // Include the auth token\r\n        }\r\n      );\r\n\r\n      // **THIS IS THE CRUCIAL PART:**\r\n      // Update the frontend state using the list of saved memories received from the backend response.\r\n      // The backend *must* send back a response like { savedMemories: [...] }.\r\n      setSavedMemories(response.data?.savedMemories || []);\r\n\r\n    } catch (err) {\r\n      console.error(\"Error saving memory:\", err);\r\n      // Log more details about the error response if available\r\n      if (err.response) {\r\n          console.error(\"Server error data:\", err.response.data);\r\n          console.error(\"Server error status:\", err.response.status);\r\n      }\r\n      // You might add UI feedback here (e.g., an error message)\r\n    }\r\n  };\r\n\r\n  // Helper function to check if a memory ID is in the current savedMemories state array\r\n  // Safely checks if savedMemories is an array before attempting to use .includes()\r\n  const isMemorySaved = (id) => {\r\n       // Check if savedMemories is an array AND if it includes the given ID\r\n       return Array.isArray(savedMemories) && savedMemories.includes(id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Memories</h1>\r\n      <ul>\r\n        {/* Render the list of all memories */}\r\n        {/* Add a safety check to ensure memories is an array before mapping */}\r\n        {Array.isArray(memories) && memories.map((memory) => (\r\n          <li key={memory._id}>\r\n            <div>\r\n              <h2>{memory.name}</h2>\r\n              {/* Render the Save/Saved button only if a user is logged in */}\r\n              {userID ? (\r\n                 <button\r\n                   onClick={() => saveMemory(memory._id)} // Call saveMemory on click\r\n                   // Button is disabled if the memory's ID is in the savedMemories state\r\n                   disabled={isMemorySaved(memory._id)}\r\n                 >\r\n                   {/* Button text changes based on the saved status */}\r\n                   {isMemorySaved(memory._id) ? \"Saved\" : \"Save\"}\r\n                 </button>\r\n              ) : (\r\n                  // Show a message if user is not logged in\r\n                  <p>Log in to save</p>\r\n              )}\r\n            </div>\r\n            <div className=\"descriptions\">\r\n              {/* Render descriptions if they exist and are an array */}\r\n              {memory.descriptions && Array.isArray(memory.descriptions) && memory.descriptions.map((desc, i) => (\r\n                <p key={i}>{desc}</p>\r\n              ))}\r\n            </div>\r\n            <img src={memory.imageUrl} alt={memory.name} />\r\n            <p>Time Spent: {memory.timeSpent}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* You can add a section here to display the saved memories list */}\r\n      {/* This section would also use the 'savedMemories' state to filter/display */}\r\n      {/* For example: */}\r\n      {/* <h2>Saved Memories</h2> */}\r\n      {/* <ul> */}\r\n      {/* {Array.isArray(savedMemories) && savedMemories.map(savedId => { */}\r\n      {/* const savedMemoryDetails = memories.find(m => m._id === savedId); */}\r\n      {/* return savedMemoryDetails ? <li key={savedId}>{savedMemoryDetails.name}</li> : null; */}\r\n      {/* })} */}\r\n      {/* </ul> */}\r\n    </div>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}