{"ast":null,"code":"var _jsxFileName = \"D:\\\\Your Memories\\\\client\\\\src\\\\pages\\\\home.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useGetUserID } from \"../hooks/useGetUserID\";\nimport { useCookies } from \"react-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const [memories, setMemories] = useState([]);\n  const [savedMemories, setSavedMemories] = useState([]);\n  const [cookies, _] = useCookies([\"access_token\"]);\n  const userID = useGetUserID();\n  useEffect(() => {\n    const fetchMemories = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:3001/memories\");\n        setMemories(response.data);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    const fetchSavedMemories = async () => {\n      try {\n        const response = await axios.get(`http://localhost:3001/memories/savedMemories/ids/${userID}`);\n        // Ensure response.data.savedMemories is an array, otherwise default to []\n        setSavedMemories(response.data.savedMemories || []);\n      } catch (err) {\n        console.error(\"Failed to fetch saved memories:\", err);\n        setSavedMemories([]); // Also set to empty array on error\n      }\n    };\n    fetchMemories();\n    if (cookies.access_token) fetchSavedMemories();\n  }, []);\n  const saveMemory = async memoryID => {\n    try {\n      const response = await axios.put(\"http://localhost:3001/memories\", {\n        memoryID,\n        userID\n      }, {\n        headers: {\n          authorization: cookies.access_token\n        }\n      });\n      // Ensure response.data.savedMemories is an array, otherwise default to []\n      setSavedMemories(response.data.savedMemories || []);\n    } catch (err) {\n      console.error(\"Failed to save memory:\", err);\n      // Optionally, you might not want to clear savedMemories here,\n      // or you might want to revert to a previous state if the save fails.\n      // For now, just logging the error. If the API is expected to return the updated list,\n      // and it fails, `savedMemories` might not reflect the true state until a refresh.\n    }\n  };\n  const isMemorySaved = id => Array.isArray(savedMemories) && savedMemories.includes(id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: memories.map(memory => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: memory.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => saveMemory(memory._id),\n            disabled: isMemorySaved(memory._id),\n            children: isMemorySaved(memory._id) ? \"Saved\" : \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"descriptions\",\n          children: memory.descriptions.map((desc, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: desc\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: memory.imageUrl,\n          alt: memory.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Time Spent: \", memory.timeSpent]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, memory._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"Ts1jE7RDCNnjnWDhfQ7k+moAglE=\", false, function () {\n  return [useCookies, useGetUserID];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","axios","useGetUserID","useCookies","jsxDEV","_jsxDEV","Home","_s","memories","setMemories","savedMemories","setSavedMemories","cookies","_","userID","fetchMemories","response","get","data","err","console","error","fetchSavedMemories","access_token","saveMemory","memoryID","put","headers","authorization","isMemorySaved","id","Array","isArray","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","map","memory","name","onClick","_id","disabled","className","descriptions","desc","i","src","imageUrl","alt","timeSpent","_c","$RefreshReg$"],"sources":["D:/Your Memories/client/src/pages/home.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useGetUserID } from \"../hooks/useGetUserID\";\r\nimport { useCookies } from \"react-cookie\";\r\n\r\nexport const Home = () => {\r\n  const [memories, setMemories] = useState([]);\r\n  const [savedMemories, setSavedMemories] = useState([]);\r\n  const [cookies, _] = useCookies([\"access_token\"]);\r\n  const userID = useGetUserID();\r\n\r\n  useEffect(() => {\r\n    const fetchMemories = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:3001/memories\");\r\n        setMemories(response.data);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    const fetchSavedMemories = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:3001/memories/savedMemories/ids/${userID}`);\r\n        // Ensure response.data.savedMemories is an array, otherwise default to []\r\n        setSavedMemories(response.data.savedMemories || []); \r\n      } catch (err) {\r\n        console.error(\"Failed to fetch saved memories:\", err);\r\n        setSavedMemories([]); // Also set to empty array on error\r\n      }\r\n    };\r\n\r\n    fetchMemories();\r\n    if (cookies.access_token) fetchSavedMemories();\r\n  }, []);\r\n\r\n  const saveMemory = async (memoryID) => {\r\n    try {\r\n      const response = await axios.put(\"http://localhost:3001/memories\", {\r\n        memoryID,\r\n        userID,\r\n      }, {\r\n        headers: { authorization: cookies.access_token }\r\n      });\r\n      // Ensure response.data.savedMemories is an array, otherwise default to []\r\n      setSavedMemories(response.data.savedMemories || []);\r\n    } catch (err) {\r\n      console.error(\"Failed to save memory:\", err);\r\n      // Optionally, you might not want to clear savedMemories here,\r\n      // or you might want to revert to a previous state if the save fails.\r\n      // For now, just logging the error. If the API is expected to return the updated list,\r\n      // and it fails, `savedMemories` might not reflect the true state until a refresh.\r\n    }\r\n  };\r\n\r\n  const isMemorySaved = (id) => Array.isArray(savedMemories) && savedMemories.includes(id);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Memories</h1>\r\n      <ul>\r\n        {memories.map((memory) => (\r\n          <li key={memory._id}>\r\n            <div>\r\n              <h2>{memory.name}</h2>\r\n              <button onClick={() => saveMemory(memory._id)} disabled={isMemorySaved(memory._id)}>\r\n                {isMemorySaved(memory._id) ? \"Saved\" : \"Save\"}\r\n              </button>\r\n            </div>\r\n            <div className=\"descriptions\">\r\n              {memory.descriptions.map((desc, i) => (\r\n                <p key={i}>{desc}</p>\r\n              ))}\r\n            </div>\r\n            <img src={memory.imageUrl} alt={memory.name} />\r\n            <p>Time Spent: {memory.timeSpent}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}